
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.cluster.data.aws_eks_cluster_auth.this will be read during apply
  # (config refers to values not yet known)
 <= data "aws_eks_cluster_auth" "this" {
      + id    = (known after apply)
      + name  = (known after apply)
      + token = (sensitive value)
    }

  # module.cluster.null_resource.apply will be created
  + resource "null_resource" "apply" {
      + id       = (known after apply)
      + triggers = {
          + "cmd_patch"  = <<-EOT
                kubectl create configmap aws-auth -n kube-system --kubeconfig <(echo $KUBECONFIG | base64 --decode)
                kubectl patch configmap/aws-auth --patch "apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: aws-auth
                  namespace: kube-system
                data:
                  mapRoles: |
                    - rolearn: arn:aws:iam::253495354476:role/linux-node-group-20231109101657270100000006
                      username: system:node:{{EC2PrivateDNSName}}
                      groups:
                        - system:bootstrappers
                        - system:nodes
                    - rolearn: arn:aws:iam::253495354476:role/windows-node-group-20231109101657270300000007
                      username: system:node:{{EC2PrivateDNSName}}
                      groups:
                        - eks:kube-proxy-windows
                        - system:bootstrappers
                        - system:nodes
                " -n kube-system --kubeconfig <(echo $KUBECONFIG | base64 --decode)
                kubectl get cm aws-auth -n kube-system -o json --kubeconfig <(echo $KUBECONFIG | base64 --decode) | jq --arg add "`cat yaml-templates/additional_roles_aws_auth.yaml`" '.data.mapRoles += $add' | kubectl apply --kubeconfig <(echo $KUBECONFIG | base64 --decode) -f -
                kubectl apply --kubeconfig <(echo $KUBECONFIG | base64 --decode) -f yaml-templates/vpc-resource-controller-configmap.yaml
            EOT
          + "kubeconfig" = (known after apply)
        }
    }

  # module.cluster.module.eks.data.tls_certificate.this[0] will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "this" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.cluster.module.eks.aws_eks_cluster.this[0] will be created
  + resource "aws_eks_cluster" "this" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = [
          + "api",
          + "audit",
          + "authenticator",
          + "controllerManager",
          + "scheduler",
        ]
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + name                      = "Hardwin-cluster"
      + platform_version          = (known after apply)
      + role_arn                  = "arn:aws:iam::253495354476:role/Hardwin-cluster-cluster-20231109101657261200000002"
      + status                    = (known after apply)
      + tags_all                  = (known after apply)
      + version                   = "1.21"

      + encryption_config {
          + resources = [
              + "secrets",
            ]

          + provider {
              + key_arn = "arn:aws:kms:us-east-2:253495354476:key/e354b561-20c0-4abb-b5e6-697af1590da7"
            }
        }

      + kubernetes_network_config {
          + ip_family         = (known after apply)
          + service_ipv4_cidr = (known after apply)
        }

      + timeouts {}

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = true
          + public_access_cidrs       = [
              + "0.0.0.0/0",
            ]
          + security_group_ids        = [
              + "sg-0ad4809c1081e31f8",
            ]
          + subnet_ids                = [
              + "subnet-0ab1e2f4a2ec64ee1",
              + "subnet-0ba15d42cf3418f24",
              + "subnet-0bf3f15bdd70075c4",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # module.cluster.module.eks.aws_iam_openid_connect_provider.oidc_provider[0] will be created
  + resource "aws_iam_openid_connect_provider" "oidc_provider" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags            = {
          + "Name" = "Hardwin-cluster-eks-irsa"
        }
      + tags_all        = {
          + "Name" = "Hardwin-cluster-eks-irsa"
        }
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.cluster.module.eks.module.self_managed_node_group["linux"].aws_autoscaling_group.this[0] will be created
  + resource "aws_autoscaling_group" "this" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + max_size                  = 2
      + metrics_granularity       = "1Minute"
      + min_size                  = 2
      + name                      = (known after apply)
      + name_prefix               = "linux-"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + tags                      = [
          + {
              + "key"                 = "Name"
              + "propagate_at_launch" = "true"
              + "value"               = "linux"
            },
          + {
              + "key"                 = "k8s.io/cluster/Hardwin-cluster"
              + "propagate_at_launch" = "true"
              + "value"               = "owned"
            },
          + {
              + "key"                 = "kubernetes.io/cluster/Hardwin-cluster"
              + "propagate_at_launch" = "true"
              + "value"               = "owned"
            },
        ]
      + vpc_zone_identifier       = [
          + "subnet-0ab1e2f4a2ec64ee1",
          + "subnet-0ba15d42cf3418f24",
          + "subnet-0bf3f15bdd70075c4",
        ]
      + wait_for_capacity_timeout = "10m"

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = (known after apply)
        }

      + timeouts {}
    }

  # module.cluster.module.eks.module.self_managed_node_group["linux"].aws_launch_template.this[0] will be created
  + resource "aws_launch_template" "this" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + description            = "Custom launch template for linux self managed node group"
      + id                     = (known after apply)
      + image_id               = "ami-052ed6d711713ebe9"
      + instance_type          = "t3.small"
      + key_name               = "eks-terraform-key"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "linux-"
      + tags_all               = (known after apply)
      + update_default_version = true
      + user_data              = (known after apply)
      + vpc_security_group_ids = [
          + "sg-005c60659d92c8ced",
          + "sg-06a55b8d5761e7ba6",
        ]

      + iam_instance_profile {
          + arn = "arn:aws:iam::253495354476:instance-profile/linux-node-group-20231109101701936500000008"
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_protocol_ipv6          = "disabled"
          + http_put_response_hop_limit = 2
          + http_tokens                 = "required"
          + instance_metadata_tags      = "disabled"
        }

      + monitoring {
          + enabled = true
        }

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Name" = "linux"
            }
        }
      + tag_specifications {
          + resource_type = "network-interface"
          + tags          = {
              + "Name" = "linux"
            }
        }
      + tag_specifications {
          + resource_type = "volume"
          + tags          = {
              + "Name" = "linux"
            }
        }
    }

  # module.cluster.module.eks.module.self_managed_node_group["windows"].aws_autoscaling_group.this[0] will be created
  + resource "aws_autoscaling_group" "this" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + max_size                  = 2
      + metrics_granularity       = "1Minute"
      + min_size                  = 2
      + name                      = (known after apply)
      + name_prefix               = "windows-"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + tags                      = [
          + {
              + "key"                 = "Name"
              + "propagate_at_launch" = "true"
              + "value"               = "windows"
            },
          + {
              + "key"                 = "k8s.io/cluster/Hardwin-cluster"
              + "propagate_at_launch" = "true"
              + "value"               = "owned"
            },
          + {
              + "key"                 = "kubernetes.io/cluster/Hardwin-cluster"
              + "propagate_at_launch" = "true"
              + "value"               = "owned"
            },
        ]
      + vpc_zone_identifier       = [
          + "subnet-0ab1e2f4a2ec64ee1",
          + "subnet-0ba15d42cf3418f24",
          + "subnet-0bf3f15bdd70075c4",
        ]
      + wait_for_capacity_timeout = "10m"

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = (known after apply)
        }

      + timeouts {}
    }

  # module.cluster.module.eks.module.self_managed_node_group["windows"].aws_launch_template.this[0] will be created
  + resource "aws_launch_template" "this" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + description            = "Custom launch template for windows self managed node group"
      + id                     = (known after apply)
      + image_id               = "ami-0d2e8d772effb4e50"
      + instance_type          = "t3.small"
      + key_name               = "eks-terraform-key"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "windows-"
      + tags_all               = (known after apply)
      + update_default_version = true
      + user_data              = (known after apply)
      + vpc_security_group_ids = [
          + "sg-005c60659d92c8ced",
          + "sg-00b56e6af1a12b481",
        ]

      + iam_instance_profile {
          + arn = "arn:aws:iam::253495354476:instance-profile/windows-node-group-2023110910170419760000000d"
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_protocol_ipv6          = "disabled"
          + http_put_response_hop_limit = 2
          + http_tokens                 = "required"
          + instance_metadata_tags      = "disabled"
        }

      + monitoring {
          + enabled = true
        }

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Name" = "windows"
            }
        }
      + tag_specifications {
          + resource_type = "network-interface"
          + tags          = {
              + "Name" = "windows"
            }
        }
      + tag_specifications {
          + resource_type = "volume"
          + tags          = {
              + "Name" = "windows"
            }
        }
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + out_eks_cluster                    = {
      + aws_auth_configmap_yaml            = <<-EOT
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: aws-auth
              namespace: kube-system
            data:
              mapRoles: |
                - rolearn: arn:aws:iam::253495354476:role/linux-node-group-20231109101657270100000006
                  username: system:node:{{EC2PrivateDNSName}}
                  groups:
                    - system:bootstrappers
                    - system:nodes
                - rolearn: arn:aws:iam::253495354476:role/windows-node-group-20231109101657270300000007
                  username: system:node:{{EC2PrivateDNSName}}
                  groups:
                    - eks:kube-proxy-windows
                    - system:bootstrappers
                    - system:nodes
        EOT
      + cloudwatch_log_group_arn           = "arn:aws:logs:us-east-2:253495354476:log-group:/aws/eks/Hardwin-cluster/cluster"
      + cloudwatch_log_group_name          = "/aws/eks/Hardwin-cluster/cluster"
      + cluster_addons                     = {}
      + cluster_arn                        = (known after apply)
      + cluster_certificate_authority_data = (known after apply)
      + cluster_endpoint                   = (known after apply)
      + cluster_iam_role_arn               = "arn:aws:iam::253495354476:role/Hardwin-cluster-cluster-20231109101657261200000002"
      + cluster_iam_role_name              = "Hardwin-cluster-cluster-20231109101657261200000002"
      + cluster_iam_role_unique_id         = "AROATWBMAERWPBJIRM3IX"
      + cluster_id                         = (known after apply)
      + cluster_identity_providers         = {}
      + cluster_oidc_issuer_url            = (known after apply)
      + cluster_platform_version           = (known after apply)
      + cluster_primary_security_group_id  = (known after apply)
      + cluster_security_group_arn         = "arn:aws:ec2:us-east-2:253495354476:security-group/sg-0ad4809c1081e31f8"
      + cluster_security_group_id          = "sg-0ad4809c1081e31f8"
      + cluster_status                     = (known after apply)
      + eks_managed_node_groups            = {}
      + fargate_profiles                   = {}
      + node_security_group_arn            = "arn:aws:ec2:us-east-2:253495354476:security-group/sg-005c60659d92c8ced"
      + node_security_group_id             = "sg-005c60659d92c8ced"
      + oidc_provider                      = (known after apply)
      + oidc_provider_arn                  = (known after apply)
      + self_managed_node_groups           = {
          + linux   = {
              + autoscaling_group_arn                       = (known after apply)
              + autoscaling_group_availability_zones        = (known after apply)
              + autoscaling_group_default_cooldown          = (known after apply)
              + autoscaling_group_desired_capacity          = 2
              + autoscaling_group_health_check_grace_period = 300
              + autoscaling_group_health_check_type         = (known after apply)
              + autoscaling_group_id                        = (known after apply)
              + autoscaling_group_max_size                  = 2
              + autoscaling_group_min_size                  = 2
              + autoscaling_group_name                      = (known after apply)
              + autoscaling_group_schedule_arns             = {}
              + autoscaling_group_vpc_zone_identifier       = [
                  + "subnet-0ab1e2f4a2ec64ee1",
                  + "subnet-0ba15d42cf3418f24",
                  + "subnet-0bf3f15bdd70075c4",
                ]
              + iam_instance_profile_arn                    = "arn:aws:iam::253495354476:instance-profile/linux-node-group-20231109101701936500000008"
              + iam_instance_profile_id                     = "linux-node-group-20231109101701936500000008"
              + iam_instance_profile_unique                 = "AIPATWBMAERWNSV5BPIXD"
              + iam_role_arn                                = "arn:aws:iam::253495354476:role/linux-node-group-20231109101657270100000006"
              + iam_role_name                               = "linux-node-group-20231109101657270100000006"
              + iam_role_unique_id                          = "AROATWBMAERWASKZ4YXZB"
              + launch_template_arn                         = (known after apply)
              + launch_template_id                          = (known after apply)
              + launch_template_latest_version              = (known after apply)
              + platform                                    = "linux"
              + security_group_arn                          = "arn:aws:ec2:us-east-2:253495354476:security-group/sg-06a55b8d5761e7ba6"
              + security_group_id                           = "sg-06a55b8d5761e7ba6"
            }
          + windows = {
              + autoscaling_group_arn                       = (known after apply)
              + autoscaling_group_availability_zones        = (known after apply)
              + autoscaling_group_default_cooldown          = (known after apply)
              + autoscaling_group_desired_capacity          = 2
              + autoscaling_group_health_check_grace_period = 300
              + autoscaling_group_health_check_type         = (known after apply)
              + autoscaling_group_id                        = (known after apply)
              + autoscaling_group_max_size                  = 2
              + autoscaling_group_min_size                  = 2
              + autoscaling_group_name                      = (known after apply)
              + autoscaling_group_schedule_arns             = {}
              + autoscaling_group_vpc_zone_identifier       = [
                  + "subnet-0ab1e2f4a2ec64ee1",
                  + "subnet-0ba15d42cf3418f24",
                  + "subnet-0bf3f15bdd70075c4",
                ]
              + iam_instance_profile_arn                    = "arn:aws:iam::253495354476:instance-profile/windows-node-group-2023110910170419760000000d"
              + iam_instance_profile_id                     = "windows-node-group-2023110910170419760000000d"
              + iam_instance_profile_unique                 = "AIPATWBMAERWM66FZ5RKF"
              + iam_role_arn                                = "arn:aws:iam::253495354476:role/windows-node-group-20231109101657270300000007"
              + iam_role_name                               = "windows-node-group-20231109101657270300000007"
              + iam_role_unique_id                          = "AROATWBMAERWIVQSK2TWM"
              + launch_template_arn                         = (known after apply)
              + launch_template_id                          = (known after apply)
              + launch_template_latest_version              = (known after apply)
              + platform                                    = "windows"
              + security_group_arn                          = "arn:aws:ec2:us-east-2:253495354476:security-group/sg-00b56e6af1a12b481"
              + security_group_id                           = "sg-00b56e6af1a12b481"
            }
        }
    }
